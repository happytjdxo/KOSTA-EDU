<9/7>

CJ Program 은 써버 사이드에서 돌아가는 프로그램
씨제이에어서 가장 핵심인건 제너릭 이다. 1.서블릿 2. 서블릿 컨피그
서블릿에서 거의다 상속을 받는다. 이닛 서비스 디스트로이 이 세가지가 대표적인것.
그리고 제너릭 서블릿은 에이치 티티피 서블릿을 상속 받는다.
나누는 기준은 프로토콜이다. 

요청라인에는 Page(get)가 들어간다. 
Header에는  W.b 정보 Connect가 들어간다.
Body에는 

주소창에 붙은 이름이랑 주소는 map방식이다. 그리고 값이 여러개 날라갈수 있다. 그건 '&' 로 해서 날라간다.
주소창에 맵방식으로 form이름 = 값 이런방식으로 나간다.
반면에 html에서 매서드 방식을 post로 하면 서블릿에서 dopost로 하면 값은 주소창에 안날라간다.
그럼 값은 어떻게 해서 서버에 전달 될까? -->



<body>
  <form action="PH"
        method="get">
이름 : <input type="text"
              name="uname">
       <input type="submint"
              value="전송">
       </form></body>



service 가 하는건 doget이냐 dopost냐 이 두가지 밖에 없다.
이 둘의 차이점은 doget은 이 페이지로 올때 (내부적으론 왔다갔다 왔다갔다 한다.근데 보이기엔 한번에 가는줄 안다.)
http://local:7777/c.p/header.html?uname=aa&uaddr=bb 이런식으로 하면 된다.





서버에서 쪽지를 바탕으로 리퀘스트 한다.
요청라인 헤더 바디 이부분이며 











근데 이런건 누구나 안다. get은 url에 post가 붙어서 날라가고 post는 어디나 누군가에 
모든 연결의 기본방식은 get이다. 하지만 사람들은 get에



어떨때 get을 쓰고 어떨때 post를 쓰는지 알고 쓰자!

get- get- "다오"."줘", 단순한 페이지 연결, 모든연결의 기본방식. --> 서버로 데이타를 전송할 목적이 아닝
post- "보내는것! 연결과는 다르다. 뭘보내? ?-> 정보를 보내       --> 서버를(정보)를 보여서, 서버는 발전 잠은잠기=    
포스트는 길이와 제약에 반갱ㅂ서다,















객체를 만들때 호출하는건 생성자이다. DD를 읽어서 서블릿을 생성 그리고 생성자를 호출

----------------------------------------------------------------------------------------------------------------
init(), service(), destroy() 이 세개는 서블릿의 lifecycle 메소드라고 한다.
호출은 container에 의해 콜백되는 메서드 이다.
호출되는 정확한 시점, 그리고 이 안에서 어떤 로직이 전개 되어야 하는지. 그리고 내가 아니니까 전부다 서버이다.
그리고 중요한게 init()   <--이게 왜 필요한지 알아야 한다!

웹브라우저를 끄는거랑 써버를 끄는거랑은 별개다!!!!!
서버를 끄지 않으면 웹브라우저를 암만 껏다 켜도 이전 카운트가 유효하다
서버를 죽이면 인스턴스도 초기화 된다.
그래서 서버를 죽였다가 다시 살려도 인스턴스가 그대로 유지되는게 아니라 꺼졌다가 다시 켜지는 거여서
0부터 다시 시작이다.


====================================================================================================================

Server 메카니즘

1. 컨테이너에서 제일 먼저 DD를 읽는다.
2. 서블릿을 읽는다.         서블릿 객체 생성.( by Container 생성자 Calling)
3. 객체가 생성된 직후에 생성된 호출은 --> init()를 호출.(Container에 의해서)				요청이 들어오기 전에 1,2,3번 다 되어야함. Ready On 상태.


4. Client가 요청을 하면 요청정보를 바탕으로 서블릿 req를 바탕으로 res 객체를 만든다. 그다음 쓰레드 객체를 생성.
5. Service(req, res)가 호출 --> do Get(req, res)이 재호출.


Container -> servlet -> init() -> service(req, res)-> doGet(req, res)


6. 요청을 수행 --> 응답 --> req, res, Thread가 Death							4, 5, 6번은 요청시 Repeat


7. destroy()가 호출
8. servlet이 Death
                              
						    


Server는 고객의 요청이 들어오기 전, Ready On 상태에서 할 일이 이미 진행 되어져 있어야 한다.
최초로 서버에 요청을 하는 사람도 본격적인 서비스를 받기 이전에
Reday On 상태가 이미 서버에서 진행되어져 있어야 한다면..
<servlet>
	<servlet-name> </servlet-name>
	<servlet-class> </servlet-class>
	<load-on-startup>1</load-on-startup>
</servlet>



<servlet>
	<servlet-name> </servlet-name>
	<servlet-class> </servlet-class>
	<load-on-startup>2</load-on-startup>
</servlet>
	

---------------- 서버가 폼에 있는 값을 가져오는 대표적인 세가지 ------------------
getParameter("폼이름") : String
getParameterValues("폼이름") : String[ ]
getParameterNames() : Enumeration
----------------------------------------------------------------------------------





------------------------ 번     외 ------------------------------
온오프믹스 : onoffmix.com		(가입해서 메일 받는것도 나쁘지 않음)
		-- (무료 세미나) - JPA와 모던 자바 데이타 저장
medium.com :
		-- 어느 스타트업에 들어가야 할까요?

nhn 개발자 포럼 :
kisa
나는 프로그래머다.(앱)
dbguid.net / 데이타베이스 진흥원>dbguid.net.. 주종명씨..