<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="HotContent">
	
	<!-- hot_content에서 사용되는 resultMap -->
	<resultMap type="board" id="hot_content">
         <result property="no" column="hot_no" jdbcType="NUMERIC"/>
         <result property="title" column="hot_title" jdbcType="VARCHAR"/>
         <result property="hits" column="hot_hits" jdbcType="NUMERIC"/>
         <result property="writeDate" column="hot_writeDate" jdbcType="VARCHAR"/>
         <result property="newFileName" column="hot_newFileName" jdbcType="VARCHAR"/>
         <result property="category" column="hot_category" jdbcType="VARCHAR"/>
         <result property="like" column="hot_like" jdbcType="NUMERIC"/>
         <result property="hate" column="hot_hate" jdbcType="NUMERIC"/>
         <result property="memberDTO.nickname" column="nickname" jdbcType="VARCHAR"/>
         <result property="content" column="hot_content" jdbcType="VARCHAR"/>
      </resultMap>

	<!-- 1. 추천수가 5일때, controller에서 쿼리문 호출.  -->
	<insert id="hot_writeBoard"  parameterType="board"><!-- Alias를, BoardDTO를 board라고 했을 때. -->
		<selectKey keyProperty="no" resultType="int" order="BEFORE" ><!-- keyProperty는 hot_contentDTO의 prop. -->
			SELECT hot_content_seq.nextVal FROM dual
		</selectKey>
		INSERT INTO hot_content
		(hot_no, hot_title, hot_content, hot_writeDate, hot_originalFileName, 
		hot_newFileName,hot_category, ssn)
		VALUES
		(#{no}, #{title}, #{content}, sysdate, #{originalFileName}, 
		#{newFileName}, #{category}, #{memberDTO.ssn} )
	</insert>
	
	<!-- 2. 게시판 글 수정 -->
	<!-- hot_content에서의 글 수정 -->
	<update id="hot_updateBoard" parameterType="board">
		UPDATE hot_content
		SET hot_title=#{title}, hot_content=#{content}, hot_originalFileName=#{originalFileName}, 
		hot_newFileName=#{newFileName}, hot_category=#{category}
		WHERE hot_no = #{no}
	</update>
	
	<!-- 3. hot_content의 글 삭제 -->
	<delete id="hot_deleteBoard" parameterType="int">
		DELETE FROM hot_content
		WHERE hot_no=#{no}
	</delete>
	
	
	<!-- 4. hot_content의, title로 게시글 검색 -->
	<select id="hot_searchBy_Title" parameterType="string" resultMap="hot_content">
		SELECT hot_no, hot_title, hot_content, hot_hits, hot_writeDate, hot_newFileName, hot_category, m.nickname 
		FROM hot_content f, member m
		WHERE hot_title LIKE ('%'||#{value}||'%') AND m.ssn = f.ssn
		<!-- JOIN 조건 안주면, member m에서ㅡ, m.nickname 을 모두 가져오기때문에, 게시판 글 x 멤버 수 만큼 출력이된다.. -->
	</select>
	
	<!-- 5. hot_content에서, 작성자 명....닉네임으로 게시글 검색 -->
	<select id="hot_searchBy_Writer" parameterType="string" resultMap="hot_content">
		SELECT hot_no, hot_title, hot_content,hot_hits, hot_writeDate,hot_newFileName,hot_category, m.nickname 
		FROM hot_content f, member m
		WHERE m.nickname = #{value} AND m.ssn = f.ssn
		<!-- 여기서 조인 안주면, 모든 게시글이 출력되고, 닉네임도 해당 닉네임으로 받아온다..  -->
	</select>
	
	<!-- 6. 내가 쓴 글 검색 -->
	<select id="searchMyText" parameterType="member" resultMap="hot_content">	
		SELECT hot_no, hot_title,hot_content, hot_hits, hot_writeDate, hot_newFileName, hot_category, m.nickname 
		FROM hot_content f, member m
		WHERE f.ssn = m.ssn AND f.ssn=#{ssn}
		<!-- 글이 작성되었던 hot_content의 ssn과, 세션에 바인딩 되어있는 member의 ssn이 같을 때, 해당하는 게시판을 가져온다-->
	</select>
	
	
	<!-- 7. hot_content 카테고리로 찾기. -->
	<select id="searchBy_Category" parameterType="string" resultMap="hot_content">	
		SELECT hot_no, hot_title, hot_content, hot_hits, hot_writeDate, hot_newFileName, hot_category, m.nickname 
		FROM hot_content f, member m
		WHERE f.ssn = m.ssn AND hot_category=#{value}
		<!-- 글이 작성되었던 hot_content의 ssn과, 세션에 바인딩 되어있는 member의 ssn이 같을 때, 해당하는 게시판을 가져온다-->
	</select>
	
	<!-- 8. hot_content에서의 목록보기 -->
      <select id="hot_getBoardList" resultType="board" resultMap="hot_content">
      SELECT
      hot_no,hot_title,hot_content,hot_hits,hot_writeDate,hot_newFileName,hot_category,hot_like,hot_hate, m.nickname
      FROM
      hot_content f, member m
      WHERE f.ssn=m.ssn
      </select>
      
      <!-- 9. hot_content에서의 글 추천 -->
      <update id="hot_likeBoard" parameterType="board">
      UPDATE hot_content
      SET hot_like=hot_like+1 
      WHERE hot_no=#{no}
      </update>

      <!-- 10. hot_content에서의 글 반대 -->
      <update id="hot_hateBoard" parameterType="board">
         UPDATE hot_content
      SET hot_hate=hot_hate+1 
      WHERE hot_no=#{no}
      </update>      
      
   <!-- 11. hot_content에서의 no값으로 게시물 상세보기  -->
      <select id="hot_getBoard" parameterType="board" resultMap="hot_content">
      SELECT
      hot_no,hot_title,hot_content,hot_hits,hot_writeDate,hot_newFileName,hot_category,hot_like,hot_hate, m.nickname
      FROM
      hot_content f, member m
      WHERE f.ssn=m.ssn AND hot_no=#{no}
      </select>

<!--       12. hot_content에서의 인기글 선정
       <select id="hot_bestOfBest" resultMap="hot_content">
         SELECT 
         hot_no,hot_title,hot_content,hot_hits,hot_writeDate,hot_newFileName
         ,hot_category,hot_like,hot_hate, ssn
         FROM
         (SELECT hot_no,hot_title,hot_content,hot_hits,hot_writeDate,hot_newFileName
         ,hot_category,hot_like,hot_hate,f.ssn
         FROM hot_content f, member m
         WHERE f.ssn = m.ssn
         ORDER BY hot_like DESC)
         WHERE rownum &lt;= 5 
         </select> -->

</mapper>	