MemberDAO

method는 servlet마다 용청이됨.
여기서 제일중요한건 비지니스로직 호출이다.
각각의 html 마다 각각의 서블릿이 있다. 
하나의 요청마다 컨넥션이 일일이 열어준다. 쿼리문 작성 쿼리문 실행. 컨넥션 리턴 받는게 시간이 가장 오래걸림
컨넥션 리턴 받으면 그때 서야 디비랑 연결 뚫음. 이때 가장 많은 리소스가 필요.	그래서 미리 만들어 놓는다.

MemberDAO에서 DB로 안가고
(connection)Resource Factory 가 DB랑 연결. 

요청할때마다 생성하는 방식이 아닌 빌어다가 쓰는 방식(렌트)

비지니스 로직마다 요청이 들어올때 그 때 그 요청을 연결하기 위한 그 연결 방식은 드라이버 방식
주소 유저 비번 이게 들어간다.
로직이 끝나면 그 만들어놓은 컨넥션은 죽고 또 들어오면 또 만든다.

그래서 동시접속수가 많을때를 대비해서 만든게 리소스 펙토리이다.
누가 만들었을까? 또는 어떤 타입으로 만들었을까? -> 인스턴스 객체 이고 만든타입은 데이타 소스 타입이다.

서버를 가동하면 JNDI 서비스가 가동된다.
이것보다 더 많이 쓰는 서비스가 naming Service이다. 이 핵심은 이름으로 등록하고 이름으로 찾는 서비스 이다.
rmi rai 프로토콜은 모르더라도 무조건 돌아간다.
이게 뭐냐? 서버를 뜯어보면 헤쉬테이블 방식(맵방식)으로 만들어져 있다.
맵이니까 키와 밸류 이다. 키에다가 이 객체에 이름을 등록 한다. 예를들어 "jdbc/conn" 아무거나 스트링으로 등록하면 된다.
이리 등록하면 밸류에는 자동적으로 주소값이 맵핑 된다. JNDI서비스를 이용해 리소스팩토리를 찾는다.

컨택스라는 객체는 네이밍 서비스를 하기 위한 가장 핵심적인 기술이다.
N.S -> 이름으로 등록, 이름으로 찾아옴.		<- 여기서 가장 핵심적인 기술은 javax.sql.context 이다.

DAO에서 context ic = new InitialContext();
DataSource ds = ic.lookup("jdbc/conn");
conn = ds.getConnection();


비지니스 로직은 무조건 서블릿에서 일어난다.
dao.a();
dao.b();
dao.c();

Dao는 디비에 접근하는 로직이다.
a(){conn	}
b(){conn	}
c(){conn	}
							****	Connection 얻는 방법.	****
								  1. DriverManager[getConnection(인자o)]
								  2. DataSource[getConnection(인자x)]
												|
												-->Context.xml
								이제 무조건 2번째 방식으로 할꺼임
								미리 만들어진걸 렌트해 오는것.
	
container를 보면 여러가지 서비스가 제공이된다.
가장 중요한 서비스가 소프트웨어가 내장되어 있다.(2번째 방식. 일명 connection 펙토리, 혹은 리소스 펙토리)BasicDataSourceFactory(얜 Apache 회사꺼다)--> 타입은 DataSource 이 데이타 소스는 (sun,oracle에서 제공해주는 소스이다.)
현업에선 Apache 회사 껄 많이 쓴다.
이때 JNDI Service가 제공이 된다.
여기 이름과 값이 들어가는게 값은 주소값이다.
우리는 이름을 지정해 주면 된다.
이름 : jdbc/Oracle
이러면 리소스 펙토리에 있는게 자동으로 값에 할당된다.
<Context>
   <Resource>
이젠 리스너도 필요가 없다. 왜? Resource에 모든 정보를 다 넣기 때문에 그래서 위에 Context와 Resource 는 바인딩 작업이다.
그리고 리소스 팩토리는 DB랑 연결되어 있다.
--------------------------------------------------------------------------------------------------------------
naming service의 핵심은
context c = new InitialContext();
ds = (DataSource)c.lookup("java:comp/env/  (<--여기까진 무조건 들어가야 한다. 외부이름 접근법임) jdbc/oracle");
Connection conn = ds.getConnection();

									★☆★☆★☆★ 중요! ☆★☆★☆★☆
--------------------------------------------------------------------------------------------------------------






