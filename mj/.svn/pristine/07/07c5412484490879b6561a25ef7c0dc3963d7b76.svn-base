<9/8>

Generic은 추상 클래스이다.
이유는 부모로부터 구현하지 않은 메서드가 존재하기 서블릿때문이다. Service
부모는 2개가 있다. servlet, servletConfig	(둘다 interface)
servlet에는 init(servletConfig), service(reg,res), destroy(), getServletconfig() 가 있다.
servletConfig 에는 getInitParameter(), getInitParameter()가 있다.  //////메서드 확인
GenericServlet 의 service는(ServletRequest,ServletResponse)가 있다.

classServlet{
	servletConfig conf;
	init(conf){
	  this.conf=conf;
    }
  }


GenericServlet의 자식은 HttpServlet이다.
자식인 HttpServlet은 doPost(), doGet()이 있다.



getparameter
getparameterValues()
getparameterName()
getparameterM



ServletRequest, ServletResponse 이 두개의 상속관계는
HttpServletRequest, HttpServletResponse 이 두개 이다.


요청이 들어오면 Container가 HttpServletRequest, HttpServletResponse, My
Servlet, init(servletConfig)
 얘네들을 만든다. 언제? --> init메서드를 호출하기 직전에 만든다.
그럼 init는 언제 호출되나? --> 생성자 호출된 직후에.


1. DD(Deployment Descriptor)를 읽는다.

<servlet>
<servlet-name>
<servlet-class>
<load-on-startup>

load-on-startup


2. 생성자 호출 -> 서블릿 생성 ( 언제? -> 서버 가동하자마자)

3. ServletConfig 생성.

4.init( ) 호출 -> 이때 ServletConfing 를 passing into


----------------------------------------------------------------------- 위 에 까지가 Ready On 상태이다! ---------------------------------
							       (본격적인 요청이 들어오기 전 미리 진행되어져야 함,)
								(단 한번만 호출되어진다.)(1. 생성자, 2.init() )

W/B에 대한 모든 요청은 우선 데몬이 받고 판단을 한다.
데몬이 할수 있는것 ( 정적인 문서)ㅡ은 지가 하는데
못하는거(동적인 문서)는 Container에게 명령을 넘긴다.


5. Client가 Server에 요청을 하면,
요청 정보를 바탕으로  req,res Thread를 각각 생성함.

6. Service()를 호출 { doget, do Post 를 재호출}
7. doGet() / doPost()가 수행 -> 응답을 했음.
8. req,res Thread가 Death



--------------------------------------------------------------------- 요청때마다 반복되는 부분 ! -----------------------------------------


9. destroy()호출
10. 서블릿이 Death
11.Server 종료





