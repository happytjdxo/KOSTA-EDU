<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="HouseBoard">
	
	<!-- alcohol_house_board에서 사용되는 resultMap -->
	<resultMap type="board" id="alcohol_house_board">
         <result property="no" column="house_no" jdbcType="NUMERIC"/>
         <result property="title" column="house_title" jdbcType="VARCHAR"/>
         <result property="hits" column="house_hits" jdbcType="NUMERIC"/>
         <result property="writeDate" column="house_writeDate" jdbcType="VARCHAR"/>
         <result property="newFileName" column="house_newFileName" jdbcType="VARCHAR"/>
         <result property="category" column="house_category" jdbcType="VARCHAR"/>
         <result property="like" column="house_like" jdbcType="NUMERIC"/>
         <result property="hate" column="house_hate" jdbcType="NUMERIC"/>
         <result property="memberDTO.nickname" column="nickname" jdbcType="VARCHAR"/>
         <result property="content" column="house_content" jdbcType="VARCHAR"/>
      </resultMap>

	<!-- 1. alcohol_house_board에서의 글 쓰기 -->
	<insert id="house_writeBoard"  parameterType="board"><!-- Alias를, BoardDTO를 board라고 했을 때. -->
		<selectKey keyProperty="no" resultType="int" order="BEFORE" ><!-- keyProperty는 alcohol_house_boardDTO의 prop. -->
			SELECT alcohol_house_board_seq.nextVal FROM dual
		</selectKey>
		INSERT INTO alcohol_house_board
		(house_no, house_title, house_content, house_writeDate, house_originalFileName, 
		house_newFileName,house_category, ssn)
		VALUES
		(#{no}, #{title}, #{content}, sysdate, #{originalFileName}, 
		#{newFileName}, #{category}, #{memberDTO.ssn} )
	</insert>
	
	<!-- 2. 게시판 글 수정 -->
	<!-- alcohol_house_board에서의 글 수정 -->
	<update id="house_updateBoard" parameterType="board">
		UPDATE alcohol_house_board
		SET house_title=#{title}, house_content=#{content}, house_originalFileName=#{originalFileName}, 
		house_newFileName=#{newFileName}, house_category=#{category}
		WHERE house_no = #{no}
	</update>
	
	<!-- 3. alcohol_house_board의 글 삭제 -->
	<delete id="house_deleteBoard" parameterType="int">
		DELETE FROM alcohol_house_board
		WHERE house_no=#{no}
	</delete>
	
	
	<!-- 4. alcohol_house_board의, title로 게시글 검색 -->
	<select id="house_searchBy_Title" parameterType="string" resultMap="alcohol_house_board">
		SELECT house_no, house_title, house_content, house_hits, house_writeDate, house_newFileName, house_category, m.nickname 
		FROM alcohol_house_board f, member m
		WHERE house_title LIKE ('%'||#{value}||'%') AND m.ssn = f.ssn
		<!-- JOIN 조건 안주면, member m에서ㅡ, m.nickname 을 모두 가져오기때문에, 게시판 글 x 멤버 수 만큼 출력이된다.. -->
	</select>
	
	<!-- 5. alcohol_house_board에서, 작성자 명....닉네임으로 게시글 검색 -->
	<select id="house_searchBy_Writer" parameterType="string" resultMap="alcohol_house_board">
		SELECT house_no, house_title, house_content,house_hits, house_writeDate,house_newFileName,house_category, m.nickname 
		FROM alcohol_house_board f, member m
		WHERE m.nickname = #{value} AND m.ssn = f.ssn
		<!-- 여기서 조인 안주면, 모든 게시글이 출력되고, 닉네임도 해당 닉네임으로 받아온다..  -->
	</select>
	
	<!-- 6. 내가 쓴 글 검색 -->
	<select id="searchMyText" parameterType="member" resultMap="alcohol_house_board">	
		SELECT house_no, house_title,house_content, house_hits, house_writeDate, house_newFileName, house_category, m.nickname 
		FROM alcohol_house_board f, member m
		WHERE f.ssn = m.ssn AND f.ssn=#{ssn}
		<!-- 글이 작성되었던 alcohol_house_board의 ssn과, 세션에 바인딩 되어있는 member의 ssn이 같을 때, 해당하는 게시판을 가져온다-->
	</select>
	
	
	<!-- 7. alcohol_house_board 카테고리로 찾기. -->
	<select id="searchBy_Category" parameterType="string" resultMap="alcohol_house_board">	
		SELECT house_no, house_title, house_content, house_hits, house_writeDate, house_newFileName, house_category, m.nickname 
		FROM alcohol_house_board f, member m
		WHERE f.ssn = m.ssn AND house_category=#{value}
		<!-- 글이 작성되었던 alcohol_house_board의 ssn과, 세션에 바인딩 되어있는 member의 ssn이 같을 때, 해당하는 게시판을 가져온다-->
	</select>
	
	<!-- 8. alcohol_house_board에서의 목록보기 -->
      <select id="house_getBoardList" resultType="board" resultMap="alcohol_house_board">
      SELECT
      house_no,house_title,house_content,house_hits,house_writeDate,house_newFileName,house_category,house_like,house_hate, m.nickname
      FROM
      alcohol_house_board f, member m
      WHERE f.ssn=m.ssn
      </select>
      
      <!-- 9. alcohol_house_board에서의 글 추천 -->
      <update id="house_likeBoard" parameterType="board">
      UPDATE alcohol_house_board
      SET house_like=house_like+1 
      WHERE house_no=#{no}
      </update>

      <!-- 10. alcohol_house_board에서의 글 반대 -->
      <update id="house_hateBoard" parameterType="board">
         UPDATE alcohol_house_board
      SET house_hate=house_hate+1 
      WHERE house_no=#{no}
      </update>      
      
   <!-- 11. alcohol_house_board에서의 no값으로 게시물 상세보기  -->
      <select id="house_getBoard" parameterType="board" resultMap="alcohol_house_board">
      SELECT
      house_no,house_title,house_content,house_hits,house_writeDate,house_newFileName,house_category,house_like,house_hate, m.nickname
      FROM
      alcohol_house_board f, member m
      WHERE f.ssn=m.ssn AND house_no=#{no}
      </select>

      <!-- 12. alcohol_house_board에서의 인기글 선정 -->
       <select id="house_bestOfBest" resultMap="alcohol_house_board">
         SELECT 
         house_no,house_title,house_content,house_hits,house_writeDate,house_newFileName
         ,house_category,house_like,house_hate, ssn
         FROM
         (SELECT house_no,house_title,house_content,house_hits,house_writeDate,house_newFileName
         ,house_category,house_like,house_hate,f.ssn
         FROM alcohol_house_board f, member m
         WHERE f.ssn = m.ssn
         ORDER BY house_like DESC)
         WHERE rownum &lt;= 5 
         </select>

</mapper>	